'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _getNameForType = require('../get-name-for-type');

var _getNameForType2 = _interopRequireDefault(_getNameForType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toParameter = function toParameter(key, value) {
  return value ? key + '="' + value + '"' : '';
};

var builtInFieldTypes = ['array', 'block', 'boolean', 'datetime', 'file', 'geopoint', 'image', 'number', 'reference', 'slug', 'string', 'text', 'url'];

var ensureArray = function ensureArray(values) {
  return _lodash2.default.isArray(values) ? values : [values];
};

var buildEdge = function buildEdge(_ref) {
  var arrowHead = _ref.arrowHead,
      from = _ref.from,
      label = _ref.label,
      to = _ref.to;

  if (_lodash2.default.includes(builtInFieldTypes, to)) {
    return null;
  }
  return from + ' -> ' + ('"' + to + '":root') + ' [penwidth="2" color="gray30" arrowsize="2" ' + [toParameter('label', label), toParameter('arrowhead', arrowHead)].join(' ') + ']';
};

var getUnusualInlinedFieldType = function getUnusualInlinedFieldType(_ref2) {
  var field = _ref2.field,
      from = _ref2.from;
  return buildEdge({ arrowHead: 'dot', from: from, label: undefined, to: field.type });
};

var getReferences = function getReferences(_ref3) {
  var arrowHead = _ref3.arrowHead,
      from = _ref3.from,
      label = _ref3.label,
      values = _ref3.values;
  return _lodash2.default.map(_lodash2.default.compact(ensureArray(values)), function (_ref4) {
    var type = _ref4.type,
        to = _ref4.to;

    if (type === 'reference') {
      return _lodash2.default.map(_lodash2.default.compact(ensureArray(to)), function (toItem) {
        return getReferences({ arrowHead: arrowHead, from: from, label: label, values: { type: toItem.type } });
      });
    }
    return buildEdge({ arrowHead: arrowHead, from: from, label: label, to: type });
  });
};

var buildFieldToEdges = function buildFieldToEdges(_ref5) {
  var fromType = _ref5.fromType,
      isShowingEdgeLabels = _ref5.isShowingEdgeLabels;
  return function (field) {
    var label = isShowingEdgeLabels ? (0, _getNameForType2.default)(field) : undefined;
    var from = '"' + fromType + '":' + field.name;
    return [getUnusualInlinedFieldType({ field: field, from: from }), getReferences({ arrowHead: 'tee', from: from, label: label, values: field.to }), getReferences({ arrowHead: 'crow', from: from, label: label, values: field.of })];
  };
};

var typeToEdges = function typeToEdges(_ref6) {
  var isShowingEdgeLabels = _ref6.isShowingEdgeLabels,
      type = _ref6.type;
  return _lodash2.default.map(type.fields, buildFieldToEdges({ fromType: type.name, isShowingEdgeLabels: isShowingEdgeLabels }));
};

var getEdgesFromTypes = function getEdgesFromTypes(types, isShowingEdgeLabels) {
  return (0, _lodash2.default)(types).map(function (type) {
    return typeToEdges({ isShowingEdgeLabels: isShowingEdgeLabels, type: type });
  }).flattenDeep().compact().uniq().value();
};

exports.default = getEdgesFromTypes;